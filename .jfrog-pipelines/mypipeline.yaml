valuesFilePath: ./values.yml
resources:
  - name: mvnRepo
    type: GitRepo
    configuration:
      path: "bnreplah/verademo" # {{ .Values.repoPath }}
      gitProvider: "github" # {{ .Values.gitProvider }}

  - name: mvnBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: "myArtIntegration"
pipelines:
- name: Verademo_hello_world
  steps:
    - name: first
      type: Bash
      execution:
        onStart:
          - echo "onStart can be used to do some setup or initialization of your dependencies to prepare for the execution."
          - echo "Downloading the latest version of the Veracode Java API Wrapper"
          #- git clone https://github.com/bnreplah/verademo.git
          #- WRAPPER_VERSION=$( `curl https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/maven-metadata.xml | grep latest |  cut -d '>' -f 2 | cut -d '<' -f 1` )
          #- echo '[INFO] ------------------------------------------------------------------------'
          #- echo '[INFO] DOWNLOADING VERACODE JAVA WRAPPER'
          #- | 
          #  if [ `wget https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/$WRAPPER_VERSION/vosp-api-wrappers-java-$WRAPPER_VERSION.jar -O VeracodeJavaAPI.jar` ]; then
          #        chmod 755 VeracodeJavaAPI.jar
          #        echo '[INFO] SUCCESSFULLY DOWNLOADED WRAPPER'
          #  else
          #        echo '[ERROR] DOWNLOAD FAILED'
          #        exit 1
          #  fi
          #- echo '[INFO] ------------------------------------------------------------------------'
          #- echo '[INFO] VERACODE UPLOAD AND SCAN'
        onExecute:
          - >-
            echo "onExecute is the main section where you would issue your build/test commands"
        onSuccess:
          - >-
            echo "onSuccess executes if the onStart or onExecute sections completed without errors"
            #cd ./verademo/app
        onFailure:
          - >-
            echo "onFailure executes if either onStart or onExecute end in failure or error."
        onComplete:
          - echo "onComplete executes after onSuccess or onFailure"
    - name: MvnBuildStep
      type: MvnBuild
      configuration:
          inputSteps:
            - name: first
          #inherits all the tags from bash
          mvnCommand: "clean package"
          sourceLocation: "app/"
          integrations:
            - name: "myArtIntegration"
          inputResources:
            - name: mvnRepo
          outputResources:
            - name:  mvnBuildInfo
          autoPublishBuildInfo: true
          
          #configFileLocation: "./verademo/app/pom.xml"
          # execution testing
      execution:
        onSuccess:
          - echo " Success "
          - ls -la output
          - ls -la dependencyState
          - ls -la workspace
          - pwd
        onFailure:
          - echo "failed"
          # attempting to upload
#    - name: publish_build
#      type: PublishBuildInfo
#      configuration:
#        forceXrayScan: false
#        inputSteps:
#          - name: MvnBuildStep
#        outputResources:
#          - name: mvnBuildInfo


  - name: Upload to Artifactory
    type: ArtifactoryUpload
    configuration:
      serverName: verajuan # Replace with your Artifactory instance name
      repository: mvnRepo         # Replace with the Artifactory repository where you want to upload the .war file
      specSource: "app/target/*.war"          # The path to the .war file produced by the Maven build

  - name: Download from Artifactory
    type: ArtifactoryDownload
    configuration:
      serverName: verajuan # Replace with your Artifactory instance name
      repository: mvnRepo          # Replace with the Artifactory repository where the .war file was uploaded
      specSource: "app/target/*.war"        # The path to the .war file in Artifactory
      target: "downloaded/*.war"  

      # checking artifact state in seperate step
    - name: checkArtifact
      type: Bash
      configuration:
        inputSteps:
          - name: MvnBuildStep
      execution: 
        onStart:
          - pwd
        onExecute:
          - ls -la {{ .resources.mvnRepo.output }}
          - ls -la workspace/upload
          - ls -la workspace/cache
          - ls -la workspace/download
          - ls -la dependencyState
        onSuccess:
          - >-
            echo "onSuccess executes if the onStart or onExecute sections completed without errors"
            #cd ./verademo/app
        onFailure:
          - >-
            echo "onFailure executes if either onStart or onExecute end in failure or error."
        onComplete:
          - >-
            echo "completed"
